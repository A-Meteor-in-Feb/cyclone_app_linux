/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/tianjiao/cyclone_version/cyclonev1.2_test/VehicleData.idl
  Source: VehicleData.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_VEHICLEDATA_HPP_0E4381E3628DED1537D6C3F877A11844
#define DDSCXX_VEHICLEDATA_HPP_0E4381E3628DED1537D6C3F877A11844

#include <utility>
#include <ostream>
#include <cstdint>
#include <string>

namespace VehicleData
{
class steeringWheel
{
private:
 std::string vehicle_id_;
 int32_t lX_ = 0;
 int32_t lY_ = 0;
 int32_t lRz_ = 0;
 int32_t rglSlider_0_ = 0;
 uint32_t buttons_ = 0;

public:
  steeringWheel() = default;

  explicit steeringWheel(
    const std::string& vehicle_id,
    int32_t lX,
    int32_t lY,
    int32_t lRz,
    int32_t rglSlider_0,
    uint32_t buttons) :
    vehicle_id_(vehicle_id),
    lX_(lX),
    lY_(lY),
    lRz_(lRz),
    rglSlider_0_(rglSlider_0),
    buttons_(buttons) { }

  const std::string& vehicle_id() const { return this->vehicle_id_; }
  std::string& vehicle_id() { return this->vehicle_id_; }
  void vehicle_id(const std::string& _val_) { this->vehicle_id_ = _val_; }
  void vehicle_id(std::string&& _val_) { this->vehicle_id_ = std::move(_val_); }
  int32_t lX() const { return this->lX_; }
  int32_t& lX() { return this->lX_; }
  void lX(int32_t _val_) { this->lX_ = _val_; }
  int32_t lY() const { return this->lY_; }
  int32_t& lY() { return this->lY_; }
  void lY(int32_t _val_) { this->lY_ = _val_; }
  int32_t lRz() const { return this->lRz_; }
  int32_t& lRz() { return this->lRz_; }
  void lRz(int32_t _val_) { this->lRz_ = _val_; }
  int32_t rglSlider_0() const { return this->rglSlider_0_; }
  int32_t& rglSlider_0() { return this->rglSlider_0_; }
  void rglSlider_0(int32_t _val_) { this->rglSlider_0_ = _val_; }
  uint32_t buttons() const { return this->buttons_; }
  uint32_t& buttons() { return this->buttons_; }
  void buttons(uint32_t _val_) { this->buttons_ = _val_; }

  bool operator==(const steeringWheel& _other) const
  {
    (void) _other;
    return vehicle_id_ == _other.vehicle_id_ &&
      lX_ == _other.lX_ &&
      lY_ == _other.lY_ &&
      lRz_ == _other.lRz_ &&
      rglSlider_0_ == _other.rglSlider_0_ &&
      buttons_ == _other.buttons_;
  }

  bool operator!=(const steeringWheel& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, steeringWheel const& rhs);

} //namespace VehicleData

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::VehicleData::steeringWheel>::getTypeName()
{
  return "VehicleData::steeringWheel";
}

template <> constexpr bool TopicTraits<::VehicleData::steeringWheel>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::VehicleData::steeringWheel>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::VehicleData::steeringWheel>::type_map_blob_sz() { return 426; }
template<> constexpr unsigned int TopicTraits<::VehicleData::steeringWheel>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::VehicleData::steeringWheel>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x8b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x16,  0x8f,  0x05,  0x50,  0xfd,  0xe2,  0x41, 
 0xbf,  0x7a,  0x8e,  0x0a,  0xf5,  0xcc,  0x18,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x35,  0xec,  0x04,  0xdc, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xfe,  0x13,  0x05,  0x4a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x1c,  0xfe,  0x42,  0x9f,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x25,  0xa7,  0x95,  0x7d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xba,  0x7a,  0xae,  0xc2,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x02,  0x63,  0x4e,  0xff,  0x00, 
 0xee,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xdb,  0x22,  0x3a,  0xdc,  0x24,  0xd3,  0x55, 
 0x85,  0x17,  0x6b,  0x54,  0x9c,  0xef,  0x77,  0x00,  0xd6,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x56,  0x65,  0x68,  0x69, 
 0x63,  0x6c,  0x65,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x73,  0x74,  0x65,  0x65,  0x72,  0x69,  0x6e, 
 0x67,  0x57,  0x68,  0x65,  0x65,  0x6c,  0x00,  0x00,  0xa6,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x76,  0x65,  0x68,  0x69,  0x63,  0x6c,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x6c,  0x58,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6c,  0x59,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x6c,  0x52,  0x7a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x72,  0x67,  0x6c,  0x53,  0x6c,  0x69,  0x64,  0x65, 
 0x72,  0x5f,  0x30,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x73,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xdb,  0x22,  0x3a, 
 0xdc,  0x24,  0xd3,  0x55,  0x85,  0x17,  0x6b,  0x54,  0x9c,  0xef,  0x77,  0xf1,  0x16,  0x8f,  0x05,  0x50, 
 0xfd,  0xe2,  0x41,  0xbf,  0x7a,  0x8e,  0x0a,  0xf5,  0xcc,  0x18, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::VehicleData::steeringWheel>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x16,  0x8f,  0x05,  0x50,  0xfd,  0xe2,  0x41,  0xbf,  0x7a,  0x8e,  0x0a, 
 0xf5,  0xcc,  0x18,  0x00,  0x77,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xdb,  0x22,  0x3a,  0xdc,  0x24,  0xd3,  0x55,  0x85,  0x17,  0x6b,  0x54, 
 0x9c,  0xef,  0x77,  0x00,  0xda,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::VehicleData::steeringWheel>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::VehicleData::steeringWheel>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::VehicleData::steeringWheel)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::VehicleData::steeringWheel>();

namespace {
  static const volatile propvec &properties___VehicleData__steeringWheel = get_type_props<::VehicleData::steeringWheel>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::VehicleData::steeringWheel& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::VehicleData::steeringWheel& instance, key_mode key) {
  const auto &props = get_type_props<::VehicleData::steeringWheel>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::VehicleData::steeringWheel& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::VehicleData::steeringWheel& instance, key_mode key) {
  const auto &props = get_type_props<::VehicleData::steeringWheel>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::VehicleData::steeringWheel& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::VehicleData::steeringWheel& instance, key_mode key) {
  const auto &props = get_type_props<::VehicleData::steeringWheel>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::VehicleData::steeringWheel& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::VehicleData::steeringWheel& instance, key_mode key) {
  const auto &props = get_type_props<::VehicleData::steeringWheel>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_VEHICLEDATA_HPP_0E4381E3628DED1537D6C3F877A11844
